for(i in 1:9){
exhaustive_model <- lm ( Mean_temperature ~ ., data = weather[,c(i,10)])
adj_R[i,1] <- exhaustive_model$adj.r.squared
}
c(1:3,7)
full_model_weather$adj.r.squared
full_model_weather$adj.r.squared
summary(full_model_weather)$adj.r.squared
#[Q2] Exhaustive Search
ES <- function(dataset){
adj_R <- data.frame()
n_input_var <- ncol(dataset)-1
for(i in 1:n_input_var){
for(j in i:n_input_var){
for(k in 1:(2^n_input_var)-1){
exhaustive_model <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
adj_R[k,1] <- summary(exhaustive_model)$adj.r.squared
}
}
}
return(adj_R)
}
ES(weather)
#[Q2] Exhaustive Search
ES <- function(dataset){
adj_R <- rep(0, ((2^n_input_var)-1))
n_input_var <- ncol(dataset)-1
for(i in 1:n_input_var){
for(j in i:n_input_var){
for(k in 1:(2^n_input_var)-1){
exhaustive_model <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
adj_R[k] <- summary(exhaustive_model)$adj.r.squared
}
}
}
return(adj_R)
}
ES(weather)
#[Q2] Exhaustive Search
ES <- function(dataset){
n_input_var <- ncol(dataset)-1
adj_R <- rep(0, ((2^n_input_var)-1))
for(i in 1:n_input_var){
for(j in i:n_input_var){
for(k in 1:(2^n_input_var)-1){
exhaustive_model <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
adj_R[k] <- summary(exhaustive_model)$adj.r.squared
}
}
}
return(adj_R)
}
ES(weather)
#[Q2] Exhaustive Search
ES <- function(dataset){
n_input_var <- ncol(dataset)-1
adj_R <- rep(0, ((2^n_input_var)-1))
for(i in 1:n_input_var){
for(j in i:n_input_var){
for(k in 1:(2^n_input_var)-1){
exhaustive_model[k] <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
adj_R[k] <- summary(exhaustive_model[k])$adj.r.squared
}
}
}
return(adj_R)
}
ES(weather)
#[Q2] Exhaustive Search
ES <- function(dataset){
n_input_var <- ncol(dataset)-1
adj_R <- rep(0, ((2^n_input_var)-1))
for(i in 1:n_input_var){
for(j in i:n_input_var){
for(k in 1:(2^n_input_var)-1){
exhaustive_model <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
print(summary(exhaustive_model)$adj.r.squared)
}
}
}
return()
}
ES(weather)
#[Q2] Exhaustive Search
ES <- function(dataset){
n_input_var <- ncol(dataset)-1
adj_R <- rep(0, ((2^n_input_var)-1))
for(k in 1:(2^n_input_var)-1){
for(i in 1:n_input_var){
for(j in i:n_input_var){
exhaustive_model <- lm( Mean_temperature ~ ., data = dataset[,c(i:j,10)])
print(summary(exhaustive_model)$adj.r.squared)
}
}
}
return()
}
ES(weather)
list(1:3)
list(c(1:3)
list(c(1:3))
list(c(1:3))
#Assignment 5
install.packages("gtools")
library(gtools)
combinations(3, 2)
#[Q3] F.S, B.E, S.S
forward_model <- step(glm(Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="forward", trace = 1)
summary(forward_model)
#[Q3] F.S, B.E, S.S
forward_model <- step(lm(Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="forward", trace = 1)
summary(forward_model)
Perf_Table
forward_model <- step(lm(Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="forward", trace = 1)
summary(forward_model)
forward_model_haty <- predict(forward_model, newdata = weather_val_data)
Perf_Table[3,] <- perf_eval_reg(weather_val_data$Mean_temperature, forward_model_haty)
Perf_Table
backward_model <- step(full_model,
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction = "backward", trace = 1)
summary(backward_model)
backward_model_haty <- predict(backward_model, newdata = weather_val_data)
Perf_Table[4,] <- perf_eval_reg(weather_val_data$Mean_temperature, backward_model_haty)
Perf_Table
backward_model <- step(full_model,
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction = "backward", trace = 1)
summary(backward_model)
backward_model_haty <- predict(backward_model, newdata = weather_val_data)
Perf_Table[4,] <- perf_eval_reg(weather_val_data$Mean_temperature, backward_model_haty)
Perf_Table
backward_model <- step(full_model_weather,
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction = "backward", trace = 1)
summary(backward_model)
backward_model_haty <- predict(backward_model, newdata = weather_val_data)
Perf_Table[4,] <- perf_eval_reg(weather_val_data$Mean_temperature, backward_model_haty)
Perf_Table
#Stepwise Selection
stepwise_model <- step(lm( Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="both", trace = 1)
summary(stepwise_model)
stepwise_model <- step(lm( Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="both", trace = 1)
summary(stepwise_model)
stepwise_model_haty <- predict(stepwise_model, newdata = weather_val_data)
Perf_Table[5,] <- perf_eval_reg(weather_val_data$Mean_temperature, stepwise_model_haty)
Perf_Table
#[Q4] G.A
# Fitness function: Adjusted R-squared
fit_F1 <- function(string){
sel_var_idx <- which(string == 1)
# Use variables whose gene value is 1
sel_x <- x[, sel_var_idx]
xy <- data.frame(sel_x, y)
# Training the model
GA_lr <- lm(y ~ ., data = xy)
summary(GA_lr)$adj.r.squared
return(summary(GA_lr)$adj.r.squared)
}
#[Q4] G.A
# Fitness function: Adjusted R-squared
fit_R <- function(string){
sel_var_idx <- which(string == 1)
# Use variables whose gene value is 1
sel_x <- x[, sel_var_idx]
xy <- data.frame(sel_x, y)
# Training the model
GA_lr <- lm(y ~ ., data = xy)
summary(GA_lr)$adj.r.squared
return(summary(GA_lr)$adj.r.squared)
}
start_time <- proc.time()
GA_F1 <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
end_time <- proc.time()
end_time - start_time
x <- as.matrix(weather_trn_data[,-10])
y <- weather_trn_data[,10]
start_time <- proc.time()
GA_F1 <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
end_time <- proc.time()
end_time - start_time
best_var_idx <- which(GA_F1@solution == 1)
best_var_idx
GA_trn_data <- weather_trn_data[,c(best_var_idx, 10)]
GA_tst_data <- weather_val_data[,c(best_var_idx, 10)]
GA_model <- lm( Mean_temperature ~ ., GA_trn_data)
summary(GA_model)
GA_model_haty <- predict(GA_model, newdata = GA_tst_data)
Perf_Table[6,] <- perf_eval_reg(GA_tst_data$Mean_temperature, GA_model_haty)
Perf_Table
iMatrix <<- 1:length(Data.train.input)
dfs <- function(idx,arr){
if(idx==length(arr)+1){
iMatrix <<- cbind(iMatrix,arr)
return()
}
arr[idx] <- 0
dfs(idx+1, arr)
arr[idx] <- 1
dfs(idx+1, arr)
}
dfs(1, 1:length(Data.train.input))
iMatrix <- data.frame(iMatrix[,-c(1,2)])
iMatrix <<- 1:length(Data.train.input)
iMatrix <<- 1:length(weather)
iMatrix <<- 1:(length(weather)-1)
dfs <- function(idx,arr){
if(idx==length(arr)+1){
iMatrix <<- cbind(iMatrix,arr)
return()
}
arr[idx] <- 0
dfs(idx+1, arr)
arr[idx] <- 1
dfs(idx+1, arr)
}
dfs(1, 1:length(Data.train.input))
dfs(1, 1:(length(weather)-1))
iMatrix <- data.frame(iMatrix[,-c(1,2)])
View(iMatrix)
exhaustive_search <- function(){
start_time<-Sys.time()
r.squared <- rep(0:9)
names(r.squared) <- c("var1","var2","var3","var4","var5","var6","var7","var8","var9","ADJ R")
for(i in 1:511){
tmp_x <- paste(colnames(Data.train.input)[which(iMatrix[i]==1)],collapse=" + ")
string <- paste("Mean_temperature ~ ", tmp_x, collapse = "")
model <- lm(as.formula(string), data = Data.train)
#model <- run.lm(i)
r.squared <- rbind(r.squared, c(iMatrix[,i],round(summary(model)$adj.r.squared,4)))
}
end_time<-Sys.time()
print(end_time - start_time)
return(r.squared)
}
result <- exhaustive_search()
View(weather)
exhaustive_search <- function(){
start_time<-Sys.time()
r.squared <- rep(0:9)
names(r.squared) <- c("var1","var2","var3","var4","var5","var6","var7","var8","var9","ADJ R")
for(i in 1:511){
tmp_x <- paste(colnames(weather[,-10])[which(iMatrix[i]==1)],collapse=" + ")
string <- paste("Mean_temperature ~ ", tmp_x, collapse = "")
model <- lm(as.formula(string), data = weather_trn_data)
#model <- run.lm(i)
r.squared <- rbind(r.squared, c(iMatrix[,i],round(summary(model)$adj.r.squared,4)))
}
end_time<-Sys.time()
print(end_time - start_time)
return(r.squared)
}
result <- exhaustive_search()
result
View(result)
library(glmnet)
library(GA)
library(moments)
summary(full_model_weather)
Perf_Table
result
View(result)
exhaustive_search <- function(){
start_time<-Sys.time()
r.squared <- rep(0:9)
names(r.squared) <- c("var1","var2","var3","var4","var5","var6","var7","var8","var9","ADJ R")
for(i in 1:511){
tmp_x <- paste(colnames(weather[,-10])[which(iMatrix[i]==1)],collapse=" + ")
string <- paste("Mean_temperature ~ ", tmp_x, collapse = "")
model <- lm(as.formula(string), data = weather_trn_data)
r.squared <- rbind(r.squared, c(iMatrix[,i],round(summary(model)$adj.r.squared,4)))
}
end_time<-Sys.time()
print(end_time - start_time)
return(r.squared)
}
result <- exhaustive_search()
View(result)
View(weather)
es_model_weather <- lm( Mean_temperature ~ Max_temperature + Min_temperature + Dewpoint +
Sea_level_pressure + Standard_pressure + Visibility, data = weather_trn_data)
es_model_weather <- lm( Mean_temperature ~ Max_termperature + Min_temperature + Dewpoint +
Sea_level_pressure + Standard_pressure + Visibility, data = weather_trn_data)
es_model_weather <- lm( Mean_temperature ~ Max_termperature + Min_temperature + Dewpoint +
Sea_level_pressure + Standard_pressure + Visibility, data = weather_trn_data)
es_model_weather
summary(es_model_weather)
es_model_haty <- predict(es_model_weather, newdata = weather_val_data)
es_model_haty
Perf_Table[2,] <- perf_eval_reg(weather_val_data$Mean_temperature, es_model_haty)
Perf_Table
View(result)
exhaustive_search <- function(){
start_time<-Sys.time()
r.squared <- rep(0:9)
names(r.squared) <- c("var1","var2","var3","var4","var5","var6","var7","var8","var9","ADJ R")
for(i in 1:511){
tmp_x <- paste(colnames(weather[,-10])[which(iMatrix[i]==1)],collapse=" + ")
string <- paste("Mean_temperature ~ ", tmp_x, collapse = "")
model <- lm(as.formula(string), data = weather_trn_data)
r.squared <- rbind(r.squared, c(iMatrix[,i],round(summary(model)$adj.r.squared,5)))
}
end_time<-Sys.time()
print(end_time - start_time)
return(r.squared)
}
result <- exhaustive_search()
View(result)
es_model_weather <- lm( Mean_temperature ~ Max_termperature + Min_temperature + Dewpoint +
Sea_level_pressure + Standard_pressure + Visibility + Wind_speed
, data = weather_trn_data)
es_model_weather
summary(es_model_weather)
es_model_haty <- predict(es_model_weather, newdata = weather_val_data)
Perf_Table[2,] <- perf_eval_reg(weather_val_data$Mean_temperature, es_model_haty)
Perf_Table
result <- result[-1,]
summary(es_model_weather)
Perf_Table
summary(forward_model)
start_time <- Sys.time()
forward_model <- step(lm(Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="forward", trace = 1)
end_time <- Sys.time()
print(end_time-start_time)
start_time <- Sys.time()
backward_model <- step(full_model_weather,
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction = "backward", trace = 1)
end_time <- Sys.time()
print(end_time-start_time)
summary(backward_model)
start_time <- Sys.time()
stepwise_model <- step(lm( Mean_temperature ~ 1, data = weather_trn_data),
scope = list(upper = full_model_weather, lower = Mean_temperature ~ 1),
direction="both", trace = 1)
end_time <- Sys.time()
print(end_time-start_time)
summary(stepwise_model)
print(end_time-start_time)
Perf_Table
#[Q4] G.A
# Fitness function: Adjusted R-squared
fit_R <- function(string){
sel_var_idx <- which(string == 1)
# Use variables whose gene value is 1
sel_x <- x[, sel_var_idx]
xy <- data.frame(sel_x, y)
# Training the model
GA_lr <- lm(y ~ ., data = xy)
summary(GA_lr)$adj.r.squared
return(summary(GA_lr)$adj.r.squared)
}
x <- as.matrix(weather_trn_data[,-10])
y <- weather_trn_data[,10]
# Variable selection by Genetic Algorithm
start_time <- proc.time()
GA_F1 <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
end_time <- proc.time()
end_time - start_time
start_time <- Sys.time()
GA_F1 <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
end_time <- Sys.time()
end_time - start_time
best_var_idx <- which(GA_F1@solution == 1)
GA_trn_data <- weather_trn_data[,c(best_var_idx, 10)]
GA_tst_data <- weather_val_data[,c(best_var_idx, 10)]
GA_model <- lm( Mean_temperature ~ ., GA_trn_data)
summary(GA_model)
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx <- which(GA_R@solution == 1)
Perf_Table
#[Q5]
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.25,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx <- which(GA_R@solution == 1)
best_var_idx
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.75,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx3 <- which(GA_R@solution == 1)
best_var_idx3
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.1, maxiter = 100, elitism = 2, seed = 123)
best_var_idx4
best_var_idx4 <- which(GA_R@solution == 1)
best_var_idx4
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.25, maxiter = 100, elitism = 2, seed = 123)
best_var_idx5 <- which(GA_R@solution == 1)
best_var_idx5
#population size changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 25, pcrossover = 0.5,
pmutation = 0.25, maxiter = 100, elitism = 2, seed = 123)
#population size changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 25, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx5 <- which(GA_R@solution == 1)
best_var_idx5
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 10, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx5 <- which(GA_R@solution == 1)
best_var_idx5
#max iteration changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 10, elitism = 2, seed = 123)
best_var_idx7 <- which(GA_R@solution == 1)
best_var_idx7
#max iteration changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 50, elitism = 2, seed = 123)
best_var_idx7 <- which(GA_R@solution == 1)
best_var_idx7
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.5, maxiter = 100, elitism = 2, seed = 123)
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 5, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx7 <- which(GA_R@solution == 1)
best_var_idx7
best_var_idx2 <- which(GA_R@solution == 1)
best_var_idx2
#[Q5]
#cross over rate changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.25,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx2 <- which(GA_R@solution == 1)
best_var_idx2
#max iteration changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 50, elitism = 2, seed = 123)
best_var_idx8 <- which(GA_R@solution == 1)
best_var_idx8
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 10, elitism = 2, seed = 123)
best_var_idx9 <- which(GA_R@solution == 1)
best_var_idx9
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 5, elitism = 2, seed = 123)
best_var_idx10 <- which(GA_R@solution == 1)
best_var_idx10
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.1, maxiter = 100, elitism = 2, seed = 123)
best_var_idx4 <- which(GA_R@solution == 1)
best_var_idx4
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.5, maxiter = 100, elitism = 2, seed = 123)
best_var_idx5 <- which(GA_R@solution == 1)
best_var_idx5
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 25, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
best_var_idx6 <- which(GA_R@solution == 1)
best_var_idx6
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 5, pcrossover = 0.5,
pmutation = 0.01, maxiter = 100, elitism = 2, seed = 123)
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 50, pcrossover = 0.5,
pmutation = 0.01, maxiter = 5, elitism = 2, seed = 123)
#extreme changes
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 10, pcrossover = 0.5,
pmutation = 0.01, maxiter = 5, elitism = 2, seed = 123)
best_var_idx11 <- which(GA_R@solution == 1)
best_var_idx11
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 10, pcrossover = 0.5,
pmutation = 0.5, maxiter = 5, elitism = 2, seed = 123)
best_var_idx12 <- which(GA_R@solution == 1)
best_var_idx12
GA_R <- ga(type = "binary", fitness = fit_R, nBits = ncol(x),
names = colnames(x), popSize = 10, pcrossover = 0.75,
pmutation = 0.01, maxiter = 5, elitism = 2, seed = 123)
best_var_idx13 <- which(GA_R@solution == 1)
best_var_idx13
