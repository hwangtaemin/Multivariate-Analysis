# Association Rules -------------------------------------------------------
# arules and arulesViz packages install
install.packages("arules")
install.packages("arulesViz")
install.packages("wordcloud")
library(arules)
library(arulesViz)
library(wordcloud)
# Part 1: Transform a data file into transaction format
# Basket type
tmp_basket <- read.transactions("Transaction_Sample_Basket.csv",
format = "basket", sep = ",", rm.duplicates=TRUE)
inspect(tmp_basket)
# Single type
tmp_single <- read.transactions("Transaction_Sample_Single.csv",
format = "single", cols = c(1,2), rm.duplicates=TRUE)
inspect(tmp_single)
# Part 2: Association Rule Mining without sequence information
data("Groceries")
summary(Groceries)
str(Groceries)
itemInfo(Groceries)
groceries_df <- as(Groceries, "data.frame")
# Item inspection
itemName <- itemLabels(Groceries)
itemCount <- itemFrequency(Groceries)*nrow(Groceries)
col <- brewer.pal(8, "Dark2")
wordcloud(words = itemName, freq = itemCount, min.freq = 1, scale = c(3, 0.2), col = col , random.order = FALSE)
itemFrequencyPlot(Groceries, support = 0.05, cex.names=0.8)
# Rule generation by Apriori
rules <- apriori(Groceries, parameter=list(support=0.01, confidence=0.35))
# Check the generated rules
inspect(rules)
# List the first three rules with the highest lift values
inspect(sort(rules, by="lift"))
# Save the rules in a text file
write.csv(as(rules, "data.frame"), "Groceries_rules.csv", row.names = FALSE)
# Plot the rules
plot(rules, method = "scatterplot")
plotly_arules(rules, method = "scatterplot", measure = c("support", "confidence"), shading = "lift")
plot(rules, method="matrix")
plotly_arules(rules, method = "matrix", measure = c("support", "confidence"), shading = "lift")
# Rule generation by Apriori with another parameters
rules <- apriori(Groceries, parameter=list(support=0.01, confidence=0.5))
plot(rules, method="graph")
plot(rules, method="paracoord")
setwd("~/")
library(Ecdat)
data(Cigar)
Cigar <- Cigar[Cigar$year %in% c(91,92),]
summary(Cigar)
unique(Cigar$year)
sum(Cigar$year==unique(Cigar))
y <- log(Cigar$sales)[Cigar$year==unique(Cigar$year)]
ybar <- mean(y)
x <- log(Cigar$price)[Cigar$year==unique(Cigar$year)]
xbar <- mean(x)
SSTx <- sum((x-xbar)^2)
Sxy <- sum((x-xbar)*y)
Sxyb <- sum(x*(y-ybar))
Sxyc <- sum((x-xbar)*(y-ybar))
Sxyd <- sum((x-xbar)*(y-100))
b1hat <- Sxy/SSTx
lm(log(sales)~log(price),data=Cigar, subset = year == unique(Cigar$year))
ols <- lm(log(sales)~log(price),data=Cigar, subset = year == unique(Cigar$year))
yhat <- ols$fitted.values
uhat <- ols$residuals
mean(yhat)
SST <- sum((y-ybar)^2)
SSE <- sum((yhat-ybar)^2)
SSR <- sum(uhat^2)
Rsq <- SSE/SST
summary(ols)
ybar
SSTx
Sxy
Sxyb
b1hat
yhat
mean(yhat)
SST
SSE
SSR
Rsq
summary(ols)
rm(list=ls(all=TRUE))
library(arules)
library(arulesViz)
library(wordcloud)
# step 1
mooc_dataset<-read.csv("big_student_clear_third_version.csv")
Institute<-mooc_dataset$institute
Course<-mooc_dataset$course_id
Region<-mooc_dataset$final_cc_cname_DI
Degree<-mooc_dataset$LoE_DI
Region<-gsub(" ","",Region)
RawTransactions<-paste(Institute, Course, Region, Degree, sep='_')
MOOC_transactions<-paste(mooc_dataset$userid_DI, RawTransactions, sep=' ')
setwd("C:/Users/hebte/Desktop/전공/산업경영공학/다변량분석/multivariate-data-analysis-master/Assignment 1")
mooc_dataset<-read.csv("big_student_clear_third_version.csv")
Institute<-mooc_dataset$institute
Course<-mooc_dataset$course_id
Region<-mooc_dataset$final_cc_cname_DI
Degree<-mooc_dataset$LoE_DI
Region<-gsub(" ","",Region)
RawTransactions<-paste(Institute, Course, Region, Degree, sep='_')
MOOC_transactions<-paste(mooc_dataset$userid_DI, RawTransactions, sep=' ')
write.csv(MOOC_transactions, file="MOOC_User_Course.csv", row.names = FALSE)
tmp_single <- as(tmp_single[-1])
tmp_single <- as(tmp_single[-1], "single")
tmp_single <- as(tmp_single[-1], "transaction")
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), sep = " ", rm.duplicates = TRUE)
tmp_single <- as(tmp_single[-1], "single")
tmp_single <- as(tmp_single[-1], "transactions")
summary(tmp_single)
library(arules)
library(arulesViz)
library(wordcloud)
mooc_dataset<-read.csv("big_student_clear_third_version.csv")
Institute<-mooc_dataset$institute
Course<-mooc_dataset$course_id
Region<-mooc_dataset$final_cc_cname_DI
Degree<-mooc_dataset$LoE_DI
Region<-gsub(" ","",Region)
RawTransactions<-paste(Institute, Course, Region, Degree, sep='_')
MOOC_transactions<-paste(mooc_dataset$userid_DI, RawTransactions, sep=' ')
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), sep = " ", rm.duplicates = TRUE)
summary(tmp_single)
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), sep = " ", rm.duplicates = TRUE)
summary(tmp_single)
itemName <- itemLabels(tmp_single)
itemCount <- itemFrequency(tmp_single)*nrow(tmp_single)
col <- brewer.pal(8, "Blues")
wordcloud(words = itemName, freq = itemCount, min.freq = 1000, scale = c(1, 0.2), col = col, random.order = FALSE)
col <- brewer.pal(8, "Blues")
col <- brewer.pal(8, "Dark2")
wordcloud(words = itemName, freq = itemCount, min.freq = 1000, scale = c(1, 0.2), col = col, random.order = FALSE)
wordcloud(words = itemName, freq = itemCount, min.freq = 700, scale = c(1, 0.2), col = col, random.order = FALSE)
col <- brewer.pal(9, "Dark2")
col <- brewer.pal(8, "Blue")
col <- brewer.pal(8, "Blues")
wordcloud(words = itemName, freq = itemCount, min.freq = 500, scale = c(1, 0.2), col = col, random.order = FALSE)
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
col <- brewer.pal(8, "Dark2")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
col <- brewer.pal(8, "Red2")
col <- brewer.pal(8, "Red")
col <- brewer.pal(8, "Reds")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
write.table(MOOC_transactions, file="MOOC_User_Course.csv", col.names = FALSE, row.names = FALSE, quote = FALSE)
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), sep = " ", rm.duplicates = TRUE)
summary(tmp_single)
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), sep = " ", rm.duplicates = TRUE)
summary(tmp_single)
itemName <- itemLabels(tmp_single)
itemCount <- itemFrequency(tmp_single)*nrow(tmp_single)
col <- brewer.pal(8, "Reds")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
col <- brewer.pal(8, "Reds")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
col <- brewer.pal(8, "Dark2")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
# step 2
tmp_single <- read.transactions("MOOC_User_Course.csv", format = "single", cols = c(1,2), rm.duplicates = TRUE)
summary(tmp_single)
summary(tmp_single)
itemName <- itemLabels(tmp_single)
itemCount <- itemFrequency(tmp_single)*nrow(tmp_single)
col <- brewer.pal(8, "Dark2")
wordcloud(words = itemName, freq = itemCount, min.freq = 250, scale = c(1, 0.2), col = col, random.order = FALSE)
wordcloud(words = itemName, freq = itemCount, min.freq = 750, scale = c(1, 0.2), col = col, random.order = FALSE)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
col <- brewer.pal(8, "Blues")
col <- brewer.pal(7, "Blues")
col <- brewer.pal(10, "Blues")
col <- brewer.pal(9, "Blues")
wordcloud(words = itemName, freq = itemCount, min.freq = 750, scale = c(1, 0.2), col = col, random.order = FALSE)
col <- brewer.pal(9, "Reds")
wordcloud(words = itemName, freq = itemCount, min.freq = 750, scale = c(1, 0.2), col = col, random.order = FALSE)
wordcloud(words = itemName, freq = itemCount, min.freq = 500, scale = c(1, 0.2), col = col, random.order = FALSE)
summary(tmp_single)
wordcloud(words = itemName, freq = itemCount, min.freq = 500, scale = c(1, 0.2), col = col, random.order = FALSE)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
# step 3(iteration later)
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.05))
inspect(rules)
# step 3(iteration later)
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.005, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.0005, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.05))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.1))
rules <- apriori(tmp_single, parameter=list(support=0.0015, confidence=0.15))
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.05))
inspect(rules)
inspect(sort(rules, by="support"))
inspect(sort(rules, by="confidence"))
inspect(sort(rules, by="lift"))
df_rules=data.frame( lhs = labels(lhs(rules)), rhs = labels(rhs(rules)), rules@quality)
sup_conf_lift=c(df_rules$support*df_rules$confidence*df_rules$lift)
df_rules=cbind(df_rules,sup_conf_lift)
head(df_rules[order(-df_rules$sup_conf_lift),],1)
head(df_rules[order(-df_rules$sup_conf_lift),],3)
write.csv(as(rules, "data.frame"), "MOOC_rules.csv", row.names = FALSE)
plot(rules, method="graph")
df_rules=data.frame( lhs = labels(lhs(rules)), rhs = labels(rhs(rules)), rules@quality)
new_criteria=c(df_rules$support*df_rules$confidence*df_rules$lift)
df_rules=cbind(df_rules,new_criteria)
head(df_rules[order(-df_rules$new_criteria),],3)
plot(rules, method="graph")
plot(rules, method="graph")
plot(rules, method="graph")
plot(rules, method="graph")
help(plot)
plot(rules, method="graph", engine = "interactive")
plot(rules, method="graph", engine = "interactive")
plot(rules, method = "graph")
library(arules)
library(arulesViz)
library(wordcloud)
plot(rules, method = "graph")
rules <- apriori(tmp_single, parameter=list(support=0.001, confidence=0.05))
inspect(rules)
plot(rules, method = "graph", engine = "interactive")
plot(rules, method = "graph", engine = "interactive")
plot(rules, method = "graph", engine = "interactive")
plot(rules, method = "graph", engine = "interactive")
plot(rules, method = "graph")
plot(rules, method = "graph")
plot(rules, method = "graph", engine = "interactive")
plot(rules, method = "graph")
plot(rules, method="two-key plot")
plot(rules, method="two-key plot", measure = c("support", "confidence"), shading = "lift")
plotly_arules(rules, method="scatterplot", measure = c("support", "confidence"), shading = "lift")
# [Extra Question]
plot(rules, method="scatterplot")
plotly_arules(rules, method="scatterplot", measure = c("support", "confidence"), shading = "lift")
plotly_arules(rules, method="two-key plot", measure = c("support", "confidence"), shading = "lift")
plotly_arules(rules, method="scatterplot", measure = c("support", "confidence"), shading = "lift")
plot(rules, method = "doubledecker")
plot(rules, method = "iplots")
#Assignment 1
install.packages(iplots)
plot(rules, method = "graph", engine = "graphviz")
#Assignment 1
install.packages("RGraphviz")
library(Rgraphviz)
library(RGraphviz)
#Assignment 1
install.packages("Rgraphviz")
plot(rules, method = "grouped")
plotly_arules(rules, method="two-key plot", engine = "htmlwidget")
plotly(rules, method="two-key plot", engine = "htmlwidget")
plot(rules, method="two-key plot", engine = "htmlwidget")
plot(rules, method="matrix3D")
plot(rules, method="matrix3D")
plot(rules, method = "grouped")
plot(rules, method = "grouped matrix")
plot(rules, engine = "htmlwidget")
plot(subrules, method="matrix", engine = "3d")
plot(rules, method="matrix", engine = "3d")
plot(rules, method="matrix", shading=c("lift", "confidence"))
plot(rules, method="grouped matrix",
col = grey.colors(10),
gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
plot(rules, method="grouped matrix",
col = grey.colors(10),
gp_labels = gpar(col = "blue", cex=1))
plot(rules, method="grouped matrix",
col = grey.colors(10),
gp_labels = gpar(cex=1))
plot(rules, method="matrix", engine = "3d")
plot(rules, method="grouped matrix")
plot(rules, method="graph", engine="htmlwidget",
igraphLayout = "layout_in_circle")
plot(rules, method="grouped matrix")
plot(rules, method="graph", engine="htmlwidget",
igraphLayout = "layout_in_circle")
library(arules)
library(arulesViz)
library(wordcloud)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8)
itemFrequencyPlot(tmp_single, support = 0.01, cex.names=0.8, topN = 5)
inspect(sort(rules, by="support"))
inspect(sort(rules, by="confidence"))
inspect(sort(rules, by="lift"))
plot(rules, method = "grouped")
plot(rules, method = "grouped")
plot(rules, method = "grouped", k = 10)
plot(rules, method = "grouped", gpar("gp_main"))
plot(rules, method = "grouped", gp_labels = gpar(cex0.8))
plot(rules, method = "grouped", gp_labels = gpar(cex=0.8))
plot(rules, method = "grouped", gp_labels = gpar(cex=0.1))
plot(rules, method = "grouped", gp_labels = gpar(cex=0.2))
plot(rules, method = "grouped", gp_labels = gpar(cex=0.3))
plot(rules, method = "grouped", gp_labels = gpar(cex=0.4))
inspect(rules)
plot(rules, method="matrix", shading=c("lift", "confidence"))
plot(rules, method="matrix", shading=c("lift", "confidence"))
# [Extra Question]
plot(rules, method="matrix", engine = "3d")
