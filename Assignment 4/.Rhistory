#[Q7]
ROC <- function(prob_table){
prob_table <- prob_table[order(-prob_table[,1]),]
ROC_TPR <- rep(0,nrow(prob_table))
ROC_FPR <- rep(0,nrow(prob_table))
ROC_actualNG <- length(which(prob_table[,2]==1))
ROC_actualG <- length(which(prob_table[,2]==0))
NG_count <- 0
G_count <- 0
ROC_table <- data.frame(prob_table, ROC_TPR, ROC_FPR)
#if(ROC_table[1,2]==1){
#  ROC_table[1,3] <- 1/ROC_actualNG
#  ROC_table[1,4] <- 0
#}
#else{
#  ROC_table[1,3] <- 0
#  ROC_table[1,4] <- 1/ROC_actualG
#}
for(i in (1:nrow(ROC_table))){
if(ROC_table[i,2]==1){
NG_count = NG_count + 1
ROC_table[i,3] = NG_count/ROC_actualNG
}
else
G_count = G_count + 1
ROC_table[i,4] = G_count/ROC_actualG
}
return(ROC_table)
}
roc_table <- ROC(response_table)
roc_table
#[Q7]
ROC <- function(prob_table){
prob_table <- prob_table[order(-prob_table[,1]),]
ROC_TPR <- rep(0,nrow(prob_table))
ROC_FPR <- rep(0,nrow(prob_table))
ROC_actualNG <- length(which(prob_table[,2]==1))
ROC_actualG <- length(which(prob_table[,2]==0))
NG_count <- 0
G_count <- 0
ROC_table <- data.frame(prob_table, ROC_TPR, ROC_FPR)
#if(ROC_table[1,2]==1){
#  ROC_table[1,3] <- 1/ROC_actualNG
#  ROC_table[1,4] <- 0
#}
#else{
#  ROC_table[1,3] <- 0
#  ROC_table[1,4] <- 1/ROC_actualG
#}
for(i in (1:nrow(ROC_table))){
if(ROC_table[i,2]==1){
NG_count = NG_count + 1
ROC_table[i,3] = NG_count/ROC_actualNG
}
else
NG_count = NG_count
ROC_table[i,3] = NG_count/ROC_actualNG
G_count = G_count + 1
ROC_table[i,4] = G_count/ROC_actualG
}
return(ROC_table)
}
roc_table <- ROC(response_table)
roc_table
#[Q7]
ROC <- function(prob_table){
prob_table <- prob_table[order(-prob_table[,1]),]
ROC_TPR <- rep(0,nrow(prob_table))
ROC_FPR <- rep(0,nrow(prob_table))
ROC_actualNG <- length(which(prob_table[,2]==1))
ROC_actualG <- length(which(prob_table[,2]==0))
NG_count <- 0
G_count <- 0
ROC_table <- data.frame(prob_table, ROC_TPR, ROC_FPR)
#if(ROC_table[1,2]==1){
#  ROC_table[1,3] <- 1/ROC_actualNG
#  ROC_table[1,4] <- 0
#}
#else{
#  ROC_table[1,3] <- 0
#  ROC_table[1,4] <- 1/ROC_actualG
#}
for(i in (1:nrow(ROC_table))){
if(ROC_table[i,2]==1){
NG_count = NG_count + 1
ROC_table[i,3] = NG_count/ROC_actualNG
}
else
NG_count = NG_count
ROC_table[i,3] = NG_count/ROC_actualNG
}
return(ROC_table)
}
roc_table <- ROC(response_table)
roc_table
#[Q7]
ROC <- function(prob_table){
prob_table <- prob_table[order(-prob_table[,1]),]
ROC_TPR <- rep(0,nrow(prob_table))
ROC_FPR <- rep(0,nrow(prob_table))
ROC_actualNG <- length(which(prob_table[,2]==1))
ROC_actualG <- length(which(prob_table[,2]==0))
NG_count <- 0
G_count <- 0
ROC_table <- data.frame(prob_table, ROC_TPR, ROC_FPR)
#if(ROC_table[1,2]==1){
#  ROC_table[1,3] <- 1/ROC_actualNG
#  ROC_table[1,4] <- 0
#}
#else{
#  ROC_table[1,3] <- 0
#  ROC_table[1,4] <- 1/ROC_actualG
#}
for(i in (1:nrow(ROC_table))){
if(ROC_table[i,2]==1){
NG_count = NG_count + 1
ROC_table[i,3] = NG_count/ROC_actualNG
}
else
NG_count = NG_count
ROC_table[i,3] = NG_count/ROC_actualNG
}
for(i in (1:nrow(ROC_table))){
if(ROC_table[i,2]==0){
G_count = G_count + 1
ROC_table[i,4] = G_count/ROC_actualG
}
else
G_count = G_count
ROC_table[i,4] = G_count/ROC_actualG
}
return(ROC_table)
}
roc_table <- ROC(response_table)
roc_table
View(roc_table)
library(ggplot2)
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))
roc_table[,4]
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+ l
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()
abs(x="1-specificity",y="sensitivity",title="ROC curve of count")
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+abs(x="1-specificity",y="sensitivity",title="ROC curve of count")
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+
labs(x="1-specificity",y="sensitivity",title="ROC curve of count")
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table))){
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return AUROC
}
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table))){
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table))){
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(ROC_actualG)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table))){
if(roc_table[i,4]==0)
AUROC = AUROC
else
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table))){
if(roc_table[i,4]==(i/ROC_actualG))
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
#  if(roc_table[i,4]==0)
#    AUROC = AUROC
#  else
#   AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1)){
if(roc_table[i,4]==roc_table[i+1,4])
AUROC = AUROC
else
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#  if(roc_table[i,4]==0)
#    AUROC = AUROC
#  else
#   AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1)){
if(roc_table[i,4]=/roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
#  if(roc_table[i,4]==0)
#    AUROC = AUROC
#  else
#   AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1)){
if(roc_table[i,4]!=roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
#  if(roc_table[i,4]==0)
#    AUROC = AUROC
#  else
#   AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
return(AUROC)
}
AUROC(roc_table)
norw(roc_table)
roc_table <- ROC(response_table)
norw(roc_table)
nrow(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:118)){
if(roc_table[i,4]!=roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1)){
if(roc_table[i,4]!=roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualNG <- length(which(roc_table[,2]==1))
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
row_num <- nrow(roc_table)
for(i in (1:row_num-1)){
if(roc_table[i,4]!=roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
}
return(AUROC)
}
AUROC(roc_table)
#ROC Curve
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+
labs(x="1-specificity",y="sensitivity",title="ROC curve of count")
library(ggplot2)
#ROC Curve
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+
labs(x="1-specificity",y="sensitivity",title="ROC curve of count")
AUROC(roc_table)
?error
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1)){
if(roc_table[i,4]!=roc_table[i+1,4]){
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
else
AUROC = AUROC
}
return(AUROC)
}
AUROC(roc_table)
nrow(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:118)){
if(roc_table[i,4]!=roc_table[i+1,4]){
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
}
else
AUROC = AUROC
}
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:2))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:118))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
AUROC(roc_table)
nrow(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-1))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:nrow(roc_table)-2))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
nrow(roc_table)
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:(nrow(roc_table)-1)))
#if(roc_table[i,4]!=roc_table[i+1,4])
#  AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
#else
#  AUROC = AUROC
AUROC = AUROC + 1
return(AUROC)
}
AUROC(roc_table)
AUROC <-function(roc_table){
ROC_actualG <- length(which(roc_table[,2]==0))
AUROC <- 0
for(i in (1:(nrow(roc_table)-1)))
if(roc_table[i,4]!=roc_table[i+1,4])
AUROC = AUROC + roc_table[i,3]*(1/ROC_actualG)
else
AUROC = AUROC
return(AUROC)
}
AUROC(roc_table)
View(Admission)
Admission_statistic
par(mfrow = c(1,2))
for (i in 1:7){
boxplot(Admission_input[,i],main=colnames(Admission_input)[i])
}
plot(Admission.cor)
dev.off()
plot(Admission.cor)
corrplot(cormat)
library(moments)
library(corrplot)
library(plyr)
library(ggplot2)
corrplot(cormat)
summary(full_lr)
response_table
lr_predicted <- rep(0, length(lr_target))
lr_predicted[which(lr_response >= 0.5)] <- 1 #0.5? 0.8?
cm_full <- table(lr_target, lr_predicted)
cm_full
perf_mat[1,] <- perf_eval2(cm_full)
perf_mat
lr_predicted1 <- rep(0, length(lr_target))
lr_predicted1[which(lr_response >= 0.5)] <- 1
cm_full <- table(lr_target, lr_predicted1)
cm_full
cm_full1 <- table(lr_target, lr_predicted1)
cm_full1
lr_predicted2 <- rep(0, length(lr_target))
lr_predicted2[which(lr_response >= 0.8)] <- 1
cm_full2 <- table(lr_target, lr_predicted2)
cm_full2
perf_mat[1,] <- perf_eval2(cm_full2)
perf_mat
lr_predicted2 <- rep(0, length(lr_target))
lr_predicted2[which(lr_response >= 0.7)] <- 1
cm_full2 <- table(lr_target, lr_predicted2)
cm_full2
perf_mat[1,] <- perf_eval2(cm_full2)
perf_mat
#cut off value = 0.3
lr_predicted3 <- rep(0, length(lr_target))
lr_predicted3[which(lr_response >= 0.3)] <- 1
cm_full3 <- table(lr_target, lr_predicted3)
cm_full3
perf_mat[1,] <- perf_eval2(cm_full3)
perf_mat
roc_table <- ROC(response_table)
AUROC(roc_table)
set.seed(2000)
trn_idx <- sample(1:nrow(Admission_removed), round(0.7*nrow(Admission_removed)))
Admission_trn <- Admission_scaled_data[trn_idx,]
Admission_tst <- Admission_scaled_data[-trn_idx,]
full_lr <- glm(Chance.of.Admit ~ ., family=binomial, Admission_trn)
lr_response <- predict(full_lr, type = "response", newdata = Admission_tst)
lr_target <- Admission_tst$Chance.of.Admit
response_table2 <- data.frame(lr_response,lr_target)
roc_table2 <- ROC(response_table2)
AUROC(roc_table2)
#iteration 5
AUROC_mat <- matrix(0,5,1)
AUROC_mat
colnames(AUROC_mat) <- "AUROC"
AUROC_mat
for(i in (1:5)){
set.seed(2000+5*i)
trn_idx <- sample(1:nrow(Admission_removed), round(0.7*nrow(Admission_removed)))
Admission_trn <- Admission_scaled_data[trn_idx,]
Admission_tst <- Admission_scaled_data[-trn_idx,]
full_lr <- glm(Chance.of.Admit ~ ., family=binomial, Admission_trn)
lr_response <- predict(full_lr, type = "response", newdata = Admission_tst)
lr_target <- Admission_tst$Chance.of.Admit
response_table <- data.frame(lr_response,lr_target)
roc_table <- ROC(response_table)
AUROC[i,]<-AUROC(roc_table)
}
for(i in (1:5)){
set.seed(2000+5*i)
trn_idx <- sample(1:nrow(Admission_removed), round(0.7*nrow(Admission_removed)))
Admission_trn <- Admission_scaled_data[trn_idx,]
Admission_tst <- Admission_scaled_data[-trn_idx,]
full_lr <- glm(Chance.of.Admit ~ ., family=binomial, Admission_trn)
lr_response <- predict(full_lr, type = "response", newdata = Admission_tst)
lr_target <- Admission_tst$Chance.of.Admit
response_table <- data.frame(lr_response,lr_target)
roc_table <- ROC(response_table)
AUROC_mat[i,]<- AUROC(roc_table)
}
AUROC_mat
#ROC Curve
ggplot(data=roc_table,aes(x=roc_table[,4],y=roc_table[,3]))+geom_path()+
labs(x="1-specificity",y="sensitivity",title="ROC curve of count")
