House <- read.csv("kc_house_data.csv")
View(House)
House_revised <- House[,-c(1,2,17)]
View(House_revised)
#[Q2]
mean(House_revised[1])
#[Q2]
mean(House_revised[1,])
#[Q2]
mean(House_revised[,1]])
#[Q2]
mean(House_revised[,1])
#[Q2]
House_statistic <- data.frame()
row <- nrow(House_revised)
col <- ncol(House_revised)
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- rbind(m, std, skew, kurt)
}
#Assignment 3
library(moments)
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- rbind(m, std, skew, kurt)
}
View(House_statistic)
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- cbind(m, std, skew, kurt)
}
View(House_statistic)
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- rbind(House_statistic, tapply(House_revised[,i], m, std, skew, kurt ))
}
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- rbind(House_statistic, tapply(House_revised[,i]))
}
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
House_statistic <- rbind(House_statistic, tapply(House_revised[,i], colnames(House_revised)))
}
rownames(House_statistic) <- colnames(House_revised)
for(i in (1:col)){
m <- mean(House_revised[,i])
std <- sqrt(var(House_revised[,i]))
skew <- skewness(House_revised[,i])
kurt <- kurtosis(House_revised[,i])
print(m)
print(std)
print(skew)
print(kurt)
}
House_statistic = rbind(colnames(House_revised[,i]))
House_statistic
olnames(House_revised)
colnames(House_revised)
rownames(House_statistic) <- colnames(House_revised)
for(i in (1:col)){
House_statistic[i,1] <- mean(House_revised[,i])
House_statistic[i,2] <- sqrt(var(House_revised[,i]))
House_statistic[i,3] <- skewness(House_revised[,i])
House_statistic[i,4] <- kurtosis(House_revised[,i])
}
#[Q2]
House_statistic <- data.frame()
for(i in (1:col)){
House_statistic[i,1] <- mean(House_revised[,i])
House_statistic[i,2] <- sqrt(var(House_revised[,i]))
House_statistic[i,3] <- skewness(House_revised[,i])
House_statistic[i,4] <- kurtosis(House_revised[,i])
}
rownames(House_statistic) <- colnames(House_revised)
House_statistic
boxplot(House_statistic[,1])
boxplot(House_statistic[,2])
House_statistic[,1]
House_revised
data(iris)
show(iris)
data(iris)
attach(iris)
N = nrow(iris)
#[Q2]
options(scipen = 100)
rownames(House_statistic) <- colnames(House_revised)
House_statistic
colnames(House_statistic)[1] <- "mean"
House_statistic
colnames(House_statistic)[1] <- "Mean"
colnames(House_statistic)[2] <- "S.D"
colnames(House_statistic)[3] <- "Skewness"
colnames(House_statistic)[4] <- "Kurtosis"
House_statistic
colnames(House_statistic)[2] <- "Standard Deviation"
House_statistic
boxplot(House_revised[,i])
boxplot(House_revised[,1])
View(House_revised)
House_statistic
#[Q2]
options(scipen = 100)
House_statistic
boxplot(House_revised[,1])
boxplot(House_revised[,2])
boxplot(House_revised[,3])
boxplot(House_revised[,4])
library(corplot)
#Assignment 3
install.packages(corrplot)
#Assignment 3
install.packages("corrplot")
library(corrplot)
corrplot(House_revised)
corrplot(House_revised[,1], House_revised[,2])
View(House_revised)
View(House)
House_statistic
#[Q2]
options(scipen = 100)
House_statistic
boxplot(House_revised[,1])
install.packages("dplyr")
library(dplyr)
House_statistic
par(mfrow = c(2,4))
for (i in 1:18){
boxplot(House_revised[,i],main=colnames(House_revised)[i])
}
outliers <- boxplot(House_revised[,1], plot=FALSE)$out
outliers
outliers <- boxplot(House_revised[,2], plot=FALSE)$out
outliers
Q1 = quantile(House_revised..Millions.,probs = c(0.25),na.rm = TRUE)
Q1 = quantile(House_revised[,1],probs = c(0.25),na.rm = TRUE)
Q1 <- data.frame()
Q3 <- data.frame()
dev.off()
LC <- data.frame()
UC <- data.frame()
for(i in 1:18){
Q1[i] = quantile(House_revised[,1],probs = c(0.25),na.rm = TRUE)
Q3[i] = quantile(House_revised[,1],probs = c(0.75),na.rm = TRUE)
LC[i] = Q1 - 1.5 * (Q3 - Q1)
UC[i] = Q3 + 1.5 * (Q3 - Q1)
}
for(i in 1:18){
Q1[i] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[i] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[i] = Q1 - 1.5 * (Q3 - Q1)
UC[i] = Q3 + 1.5 * (Q3 - Q1)
}
for(i in 1:18){
Q1[i,1] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[i,1] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[i,1] = Q1 - 1.5 * (Q3 - Q1)
UC[i,1] = Q3 + 1.5 * (Q3 - Q1)
}
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
View(House_removed)
View(UC)
for(i in 1:18){
Q1[,i] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[,i] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[,i] = Q1 - 1.5 * (Q3 - Q1)
UC[,i] = Q3 + 1.5 * (Q3 - Q1)
}
View(UC)
Q1 <- data.frame()
Q3 <- data.frame()
LC <- data.frame()
UC <- data.frame()
for(i in 1:18){
Q1[,i] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[,i] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[,i] = Q1 - 1.5 * (Q3[,i] - Q1[,i])
UC[,i] = Q3 + 1.5 * (Q3[,i] - Q1[,i])
}
for(i in 1:18){
Q1[i,1] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[i,1] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[i,1] = Q1 - 1.5 * (Q3[i,1] - Q1[i,1])
UC[i,1] = Q3 + 1.5 * (Q3[i,1] - Q1[i,1])
}
View(UC)
warning()
for(i in 1:18){
Q1[i,1] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[i,1] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[i,1] = Q1 - 1.5 * (Q3[i,1] - Q1[i,1])
UC[i,1] = Q3 + 1.5 * (Q3[i,1] - Q1[i,1])
}
warnings()
for(i in 1:18){
Q1[i,1] = quantile(House_revised[,i],probs = c(0.25),na.rm = TRUE)
Q3[i,1] = quantile(House_revised[,i],probs = c(0.75),na.rm = TRUE)
LC[i,1] = Q1[i,1] - 1.5 * (Q3[i,1] - Q1[i,1])
UC[i,1] = Q3[i,1] + 1.5 * (Q3[i,1] - Q1[i,1])
}
View(UC)
View(LC)
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
View(House_removed)
House_removed = subset(House_revised, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
#Assignment 3
install.packages("psych")
library(psych)
describe(House_revised)
House_removed = subset(House_removed, House_revised[,5] > LC[5,1] & House_revised[,5] < UC[5,1])
House_removed = subset(House_removed, House_revised[,6] > LC[6,1] & House_revised[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed = subset(House_removed, House_revised[,4] > LC[4,1] & House_revised[,4] < UC[4,1])
House_removed = subset(House_removed, House_revised[,5] > LC[5,1] & House_revised[,5] < UC[5,1])
House_removed = subset(House_removed, House_revised[,6] > LC[6,1] & House_revised[,6] < UC[6,1])
House_removed = subset(House_removed, House_revised[,5] > LC[5,1] & House_revised[,5] < UC[5,1])
House_removed = subset(House_removed, House_revised[,6] > LC[6,1] & House_revised[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed = subset(House_removed, House_revised[,4] > LC[4,1] & House_revised[,4] < UC[4,1])
House_removed1 = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed2 = subset(House_removed1, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed3 = subset(House_removed2, House_revised[,4] > LC[4,1] & House_revised[,4] < UC[4,1])
House_removed4 = subset(House_removed3, House_revised[,5] > LC[5,1] & House_revised[,5] < UC[5,1])
House_removed5 = subset(House_removed4, House_revised[,6] > LC[6,1] & House_revised[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
View(House_removed1)
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_revised[,3] > LC[3,1] & House_revised[,3] < UC[3,1])
House_removed = subset(House_removed, House_revised[,4] > LC[4,1] & House_revised[,4] < UC[4,1])
House_removed = subset(House_removed, House_revised[,5] > LC[5,1] & House_revised[,5] < UC[5,1])
House_removed = subset(House_removed, House_revised[,6] > LC[6,1] & House_revised[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_removed[,3] > LC[3,1] & House_removed[,3] < UC[3,1])
House_removed = subset(House_removed, House_removed[,4] > LC[4,1] & House_removed[,4] < UC[4,1])
House_removed = subset(House_removed, House_removed[,5] > LC[5,1] & House_removed[,5] < UC[5,1])
House_removed = subset(House_removed, House_removed[,6] > LC[6,1] & House_removed[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_removed[,3] > LC[3,1] & House_removed[,3] < UC[3,1])
House_removed = subset(House_removed, House_removed[,4] > LC[4,1] & House_removed[,4] < UC[4,1])
House_removed = subset(House_removed, House_removed[,5] > LC[5,1] & House_removed[,5] < UC[5,1])
House_removed = subset(House_removed, House_removed[,6] > LC[6,1] & House_removed[,6] < UC[6,1])
for(i in 3:18){
House_removed = subset(House_removed, House_removed[,i] > LC[i,1] & House_removed[,i] < UC[i,1])
}
View(House_removed)
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
for(i in 3:18){
House_removed = subset(House_removed, House_removed[,i] > LC[i,1] & House_removed[,i] < UC[i,1])
}
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_removed[,3] > LC[3,1] & House_removed[,3] < UC[3,1])
House_removed = subset(House_removed, House_removed[,4] > LC[4,1] & House_removed[,4] < UC[4,1])
House_removed = subset(House_removed, House_removed[,5] > LC[5,1] & House_removed[,5] < UC[5,1])
House_removed = subset(House_removed, House_removed[,6] > LC[6,1] & House_removed[,6] < UC[6,1])
House_removed = subset(House_removed, House_removed[,7] > LC[7,1] & House_removed[,7] < UC[7,1])
House_removed = subset(House_removed, House_removed[,6] > LC[6,1] & House_removed[,6] < UC[6,1])
House_removed = subset(House_revised, House_revised[,2] > LC[2,1] & House_revised[,2] < UC[2,1])
House_removed = subset(House_removed, House_removed[,3] > LC[3,1] & House_removed[,3] < UC[3,1])
House_removed = subset(House_removed, House_removed[,4] > LC[4,1] & House_removed[,4] < UC[4,1])
House_removed = subset(House_removed, House_removed[,5] > LC[5,1] & House_removed[,5] < UC[5,1])
House_removed = subset(House_removed, House_removed[,6] > LC[6,1] & House_removed[,6] < UC[6,1])
View(House_removed)
View(UC)
House_removed = subset(House_removed, House_removed[,9] > LC[9,1] & House_removed[,9] < UC[9,1])
View(LC)
View(UC)
View(House)
#Assignment 3
library(moments)
library(corrplot)
library(dplyr)
perf_eval_reg <- function(tgt_y, pre_y){
# RMSE
rmse <- sqrt(mean((tgt_y - pre_y)^2))
# MAE
mae <- mean(abs(tgt_y - pre_y))
# MAPE
mape <- 100*mean(abs((tgt_y - pre_y)/tgt_y))
return(c(rmse, mae, mape))
}
#[Q1]
House <- read.csv("kc_house_data.csv")
House_revised <- House[,-c(1,2,17)]
row <- nrow(House_revised)
col <- ncol(House_revised)
#[Q2]
options(scipen = 100)
House_statistic <- data.frame()
for(i in (1:col)){
House_statistic[i,1] <- mean(House_revised[,i])
House_statistic[i,2] <- sqrt(var(House_revised[,i]))
House_statistic[i,3] <- skewness(House_revised[,i])
House_statistic[i,4] <- kurtosis(House_revised[,i])
}
rownames(House_statistic) <- colnames(House_revised)
colnames(House_statistic)[1] <- "Mean"
colnames(House_statistic)[2] <- "Standard Deviation"
colnames(House_statistic)[3] <- "Skewness"
colnames(House_statistic)[4] <- "Kurtosis"
House_statistic
par(mfrow = c(2,4))
for (i in 1:18){
boxplot(House_revised[,i],main=colnames(House_revised)[i])
}
dev.off()
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
View(House)
View(House_revised)
House_revised[,4] <- remove_outliers(House_revised[,4])
View(House_revised)
House_revised <- na.omit(House_revised)
View(House_revised)
View(House_revised)
House_revised[,2] <- remove_outliers(House_revised[,2])
House_revised[,2] <- remove_outliers(House_revised[,2])
House_revised[,3] <- remove_outliers(House_revised[,3])
House_revised <- na.omit(House_revised)
House_revised[,5] <- remove_outliers(House_revised[,5])
House_revised <- na.omit(House_revised)
House_revised[,6] <- remove_outliers(House_revised[,6])
House_revised[,11] <- remove_outliers(House_revised[,11])
House_revised[,12] <- remove_outliers(House_revised[,12])
House_revised <- na.omit(House_revised)
House_revised[,15] <- remove_outliers(House_revised[,15])
House_revised[,16] <- remove_outliers(House_revised[,16])
House_revised <- na.omit(House_revised)
House_revised[,17] <- remove_outliers(House_revised[,17])
House_revised[,18] <- remove_outliers(House_revised[,18])
House_revised <- na.omit(House_revised)
House_revised[,13] <- remove_outliers(House_revised[,13])
House_revised[,9] <- remove_outliers(House_revised[,9])
House_revised[,10] <- remove_outliers(House_revised[,10])
House_revised <- na.omit(House_revised)
#[Q4]
corrplot(House_revised[,2],House_revised[,3])
#[Q4]
corrplot(House_revised[,2]~House_revised[,3])
data.cor = House_revised[,-1]
cormat <- round(cor(data.cor),3)
head(cormat,15)
data.cor = House_revised[,-1]
cormat <- round(cor(data.cor),3)
head(cormat,15)
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
corrplot(cormat)
data.cor = House_revised[,-1]
cormat <- round(cor(data.cor),3)
corrplot(cormat)
plot(cormat)
View(cormat)
plot(cormat)
plot(House_revised)
corrplot(cormat)
plot(data.cor[sample(1:nrow(data.cor),500),])
cormat <- round(cor(data.cor),3)
corrplot(cormat)
library(moments)
library(corrplot)
library(dplyr)
corrplot(cormat)
House_trn_idx <- sample(1:row, round(0.7*row))
row_revised <- nrow(House_revised)
House_trn_idx <- sample(1:row_revised, round(0.7*row_revised))
House_trn_data <- House_revised[House_trn_idx,]
House_val_data <- House_revised[-House_trn_idx,]
View(House_trn_data)
mlr_House <- lm(price ~ ., data = House_trn_data)
mlr_House
summary(mlr_House)
plot(mlr_House)
perf_mat <- matrix(0, nrow = 1, ncol = 3)
colnames(perf_mat) <- c("RMSE", "MAE", "MAPE")
rownames(perf_mat) <- c("House")
#[Q7]
mlr_House_haty <- predict(mlr_House, newdata = House_val_data)
perf_mat[1,] <- perf_eval_reg(House_val_data$price, mlr_House_haty)
perf_mat
perf_mat <- matrix(0, nrow = 2, ncol = 3)
rownames(perf_mat) <- c("House","House_7")
colnames(perf_mat) <- c("RMSE", "MAE", "MAPE")
perf_mat[1,] <- perf_eval_reg(House_val_data$price, mlr_House_haty)
perf_mat
#[Q8]
House_trn_data <- House_trn_data[,c(4,7,8,9,10,13,15)]
mlr_housing <- lm(price ~., data = House_trn_data)
#[Q8]
House_trn_data <- House_trn_data[,c(1,4,7,8,9,10,13,15)]
House_trn_data <- House_revised[House_trn_idx,]
#[Q8]
House_trn_data <- House_trn_data[,c(1,4,7,8,9,10,13,15)]
mlr_housing <- lm(price ~., data = House_trn_data)
summary(mlr_housing)
pred<-predict(mlr_housing, newdata = House_val_data)
perf_mat[2,] <- perf_eval_reg(housing_val_data$price,pred)
perf_mat[2,] <- perf_eval_reg(House_val_data$price,pred)
perf_mat
#[Extra Question]
pair.panels(cormat)
library(psych)
#[Extra Question]
pair.panels(cormat)
#[Extra Question]
pairs.panels(cormat)
