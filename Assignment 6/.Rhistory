plot(CART.model)
text(CART.model, pretty = 1)
View(heart)
# Full tree prediction
CART.prey <- predict(CART.model, CART.tst, type = "class")
CART.cfm <- table(CART.tst$PloanYN, CART.prey)
CART.cfm
CART.cfm <- table(CART.tst$heartYN, CART.prey)
CART.cfm
Perf.Table[1,] <- perf_eval(CART.cfm)
Perf.Table
# Performance table
Perf.Table <- matrix(0, nrow = 5, ncol = 6)
rownames(Perf.Table) <- c("Tree_full", "Tree_pruned")
rownames(Perf.Table) <- c("Tree_full", "Tree_pruned"," "," "," ")
colnames(Perf.Table) <- c("TPR", "Precision", "TNR", "Accuracy", "BCR", "F1-Measure")
Perf.Table
Perf.Table[1,] <- perf_eval(CART.cfm)
Perf.Table
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
CART.model.cv
# Select the final model
CART.model.pruned <- prune.misclass(CART.model, best = 4)
plot(CART.model.pruned)
text(CART.model.pruned, pretty = 1)
# Prediction
CART.prey.pruned <- predict(CART.model.pruned, CART.tst, type = "class")
CART.cfm2 <- table(CART.tst$heartYN, CART.prey.pruned)
CART.cfm2
Perf.Table[2,] <- perf_eval(CART.cfm)
Perf.Table[2,] <- perf_eval(CART.cfm2)
Perf.Table
#[Q3] various packages ---------------------------------------------------
install.packages("rpart")
library(rpart)
rpart.model <- rpart(heartYN ~ ., CART.trn)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
text(rpart.model, pretty = 1)
plot(rpart.model)
text(rpart.model, pretty = 1)
printcp(rpart.model)
plotcp(rpart.model)
ptree <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpartmod$cptable[,"xerror"]),"CP"])
ptree <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
plot(ptree)
text(ptree)
rpart.model.pruned <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
plot(rpart.model.pruned)
text(rpart.model.pruned)
x <- c(1,2,3)
y <- c(2,x,3)
x+y
rpart.model <- rpart(heartYN ~ ., CART.trn)
library(rpart)
rpart.model <- rpart(heartYN ~ ., CART.trn)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
plot(rpart.model.pruned)
text(rpart.model.pruned)
plot(rpart.model)
text(rpart.model, pretty = 1)
rpart.model2 <- rpart(heartYN ~ ., CART.trn, minsplit = 10)
plot(rpart.model2)
rpart.model2 <- rpart(heartYN ~ ., CART.trn, minsplit = 10, minbucket = 5)
plot(rpart.model2)
install.packages("ctree")
install.packages("party")
library(party)
cpart()
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
printcp(rpart.model)
plotcp(rpart.model)
library(rpart)
printcp(rpart.model)
plotcp(rpart.model)
rpart.model.pruned <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
plot(rpart.model.pruned)
text(rpart.model.pruned)
# Prediction
rpart.prey.pruned <- predict(rpart.model.pruned, CART.tst, type = "class")
CART.cfm3 <- table(CART.tst$heartYN, rpart.prey.pruned)
CART.cfm3
Perf.Table[3,] <- perf_eval(CART.cfm3)
Perf.Table
rownames(Perf.Table) <- c("Tree_full", "Tree_pruned","rpart"," "," ")
Perf.Table
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Classification and Regression Tree (CART) -------------------------------
#[Q1] Full Tree
library(tree)
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
CART.model.cv
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
# Select the final model
CART.model.pruned <- prune.misclass(CART.model, best = 4)
plot(CART.model.pruned)
text(CART.model.pruned, pretty = 1)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
printcp(rpart.model)
plotcp(rpart.model)
rpart.model.pruned <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
plot(rpart.model.pruned)
text(rpart.model.pruned)
# Prediction
rpart.prey.pruned <- predict(rpart.model.pruned, CART.tst, type = "class")
CART.cfm3 <- table(CART.tst$heartYN, rpart.prey.pruned)
CART.cfm3
Perf.Table[3,] <- perf_eval(CART.cfm3)
Perf.Table
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
printcp(rpart.model)
plotcp(rpart.model)
rpart.model.pruned <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
plot(rpart.model.pruned)
text(rpart.model.pruned)
# Prediction
rpart.prey.pruned <- predict(rpart.model.pruned, CART.tst, type = "class")
CART.cfm3 <- table(CART.tst$heartYN, rpart.prey.pruned)
CART.cfm3
Perf.Table[3,] <- perf_eval(CART.cfm3)
Perf.Table
install.packages("rpart.plot")
library(rpart.plot)
prp(rpart.model.pruned)
prp(rpart.model.pruned, type=4)
prp(rpart.model.pruned, type=3)
prp(rpart.model.pruned, type=2)
prp(rpart.model.pruned, type=1)
prp(rpart.model.pruned)
prp(rpart.model.pruned, extra=2)
prp(rpart.model.pruned, extra=2, digits = 2)
prp(rpart.model.pruned, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
summary(rpart.model)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.1)
summary(rpart.model)
plot(rpart.model)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
# Training the tree
CART.model <- tree(heartYN ~ ., CART.trn)
# Classification and Regression Tree (CART) -------------------------------
#[Q1] Full Tree
library(tree)
# Training the tree
CART.model <- tree(heartYN ~ ., CART.trn)
summary(CART.model)
Perf.Table
rownames(Perf.Table) <- c("Tree", "Tree_pruned","rpart"," "," ")
# Plot the tree
plot(CART.model)
text(CART.model, pretty = 1)
# Plot the tree
plot(CART.model)
text(CART.model, pretty = 1)
text(CART.model, pretty = 2)
text(CART.model, pretty = 1)
text(CART.model, pretty = 1)
# Plot the tree
plot(CART.model)
text(CART.model, pretty = 1)
# Full tree prediction
CART.prey <- predict(CART.model, CART.tst, type = "class")
CART.cfm <- table(CART.tst$heartYN, CART.prey)
CART.cfm
Perf.Table
CART.model.cv
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
CART.model.cv
# Split the data into the training/validation sets
set.seed(12345)
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
CART.model.cv
trn.idx <- sample(1:nheart, round(0.66*nheart))
CART.trn <- data.frame(heart.input[trn.idx,], heartYN = heart.target[trn.idx])
CART.tst <- data.frame(heart.input[-trn.idx,], heartYN = heart.target[-trn.idx])
# Training the tree
CART.model <- tree(heartYN ~ ., CART.trn)
summary(CART.model)
# Plot the tree
plot(CART.model)
text(CART.model, pretty = 1)
# Training the tree
CART.model <- tree(heartYN ~ ., CART.trn)
summary(CART.model)
plot(CART.model)
text(CART.model, pretty = 1)
CART.prey <- predict(CART.model, CART.tst, type = "class")
CART.cfm <- table(CART.tst$heartYN, CART.prey)
CART.cfm
Perf.Table[1,] <- perf_eval(CART.cfm)
Perf.Table
#[Q2] Pruning
# Find the best tree
CART.model.cv <- cv.tree(CART.model, FUN = prune.misclass)
# Plot the pruning result
plot(CART.model.cv$size, CART.model.cv$dev, type = "b")
CART.model.cv
# Select the final model
CART.model.pruned <- prune.misclass(CART.model, best = 4)
plot(CART.model.pruned)
text(CART.model.pruned, pretty = 1)
summary(CART.model.pruned)
CART.prey.pruned <- predict(CART.model.pruned, CART.tst, type = "class")
CART.cfm2 <- table(CART.tst$heartYN, CART.prey.pruned)
CART.cfm2
Perf.Table[2,] <- perf_eval(CART.cfm2)
Perf.Table
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 4)
library(rpart)
library(rpart.plot)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 4)
summary(rpart.model)
plot(rpart.model)
text(rpart.model, pretty = 1)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 2)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 5)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 11)
prp(rpart.model, type=4, extra=2, digits = 2)
plot(rpart.model)
text(rpart.model, pretty = 1)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 30)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 1)
prp(rpart.model, type=4, extra=2, digits = 2)
plot(rpart.model)
text(rpart.model, pretty = 1)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxcompete = 0)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minsplit = 20)
prp(rpart.model, type=4, extra=2, digits = 2)
plot(rpart.model)
text(rpart.model, pretty = 1)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
prp(rpart.model, type=4, extra=2, digits = 2)
plot(rpart.model)
text(rpart.model, pretty = 1)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minsplit=5)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
prp(rpart.model, type=4, extra=2, digits = 2)
# minsplit variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minsplit=5)
prp(rpart.model, type=4, extra=2, digits = 2)
# minsplit variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minsplit=4)
prp(rpart.model, type=4, extra=2, digits = 2)
# minbucket variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minbucket=5)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, minbucket=15)
prp(rpart.model, type=4, extra=2, digits = 2)
# maxdepth variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxdepth=5)
prp(rpart.model, type=4, extra=2, digits = 2)
# maxdepth variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxdepth=4)
prp(rpart.model, type=4, extra=2, digits = 2)
# maxdepth variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxdepth=6)
# maxdepth variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
prp(rpart.model, type=4, extra=2, digits = 2)
# maxdepth variation
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxdepth=3)
prp(rpart.model, type=4, extra=2, digits = 2)
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01, maxdepth=2)
prp(rpart.model, type=4, extra=2, digits = 2)
# Pruning
rpart.model <- rpart(heartYN ~ ., CART.trn, xval=10, cp=0.01)
printcp(rpart.model)
plotcp(rpart.model)
rpart.model.pruned <- prune(rpart.model, cp= rpart.model$cptable[which.min(rpart.model$cptable[,"xerror"]),"CP"])
prp(rpart.model.pruned, type=4, extra=2, digits = 2)
# Prediction
rpart.prey.pruned <- predict(rpart.model.pruned, CART.tst, type = "class")
CART.cfm3 <- table(CART.tst$heartYN, rpart.prey.pruned)
CART.cfm3
Perf.Table[3,] <- perf_eval(CART.cfm3)
Perf.Table
# [Q3-4] plotting
prp(rpart.model.pruned, type=3, extra=2, digits = 2)
prp(rpart.model.pruned, type=5, extra=2, digits = 2)
prp(rpart.model.pruned, type=6, extra=2, digits = 2)
# [Q3-4] plotting
par(mfrow = c(2,2))
prp(rpart.model.pruned, type=5, extra=2, digits = 2)
prp(rpart.model.pruned, type=3, extra=2, digits = 2)
prp(rpart.model.pruned, type=2, extra=2, digits = 2)
prp(rpart.model.pruned, type=1, extra=2, digits = 2)
dev.off()
CART.cfm3
prp(rpart.model.pruned, type=4, extra=2, digits = 2, roundint = TRUE)
prp(rpart.model.pruned, type=4, extra=2, digits = 2, roundint = FALSE)
Perf.Table
party.model <- ctree(heartYN ~ ., CART.trn)
library(party)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, testtype = "Bonferroni")
party.model <- ctree(heartYN ~ ., CART.trn, testtype = "MonteCarlo")
party.model <- ctree(heartYN ~ ., CART.trn, mincriterion = 0.95)
party.model <- ctree_control(heartYN ~ ., CART.trn, mincriterion = 0.95)
party.model <- ctree_control(heartYN ~ ., CART.trn)
party.model <- ctree(heartYN ~ ., CART.trn)
party.model <- ctree(heartYN ~ ., CART.trn, minsplit=5)
party.model <- ctree(heartYN ~ ., CART.trn, minsplit=5)
party.model <- ctree(heartYN ~ ., CART.trn, minsplit=3)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minsplit = 5))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(testtype = "MonteCarlo"))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(teststat = "quad"))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(testtype = "Univariate"))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 1))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 2))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 3))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(savesplitstats = FALSE))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model)
plot(party.model, roundint = FALSE)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model, roundint = FALSE)
plot(party.model, roundint = FALSE, digit = 2)
options(scipen = 4)
plot(party.model, roundint = FALSE, digit = 2)
plot(party.model, roundint = FALSE)
plot(party.model, extra=2)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model, extra=2)
plot(party.model, ep_args = list(digits = 1))
plot(party.model, ep_args = list(digits = 2))
rpart.plot(party.model, ep_args = list(digits = 2))
plot(party.model)
party.plot(party.model)
ctree.plot(party.model)
plot(party.model, type = "extended")
plot(party.model, type = "simple")
plot(party.model, tnex = 1)
#[Q3-4]
options(digits=2)
plot(party.model, type = "simple")
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model, type = "simple")
plot(party.model)
prp(party.model)
plot(party.model, round(digits = 2))
plot(party.model, digits = 2)
View(heart)
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model)
# options variation
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mincriterion = 0.99))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mincriterion = 0.9))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minsplit = 20))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minsplit = 5))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minsplit = 4))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minsplit = 50))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minbucket = 5))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minbucket = 2))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(minbucket = 10))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 3))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 4))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 3))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 3))
plot(party.model)
party.model <- ctree(heartYN ~ ., CART.trn, control = ctree_control(mtry = 4))
plot(party.model)
plot(party.model, pop = TRUE)
#[Q3-4]
party.model <- ctree(heartYN ~ ., CART.trn)
plot(party.model, pop = TRUE)
plot(party.model, tp_args = list())
plot(party.model, inner_panel = node_inner, ip_args = list())
plot(party.model, tnex = 3)
plot(party.model, drop_terminal = TRUE)
plot(party.model, type = "simple")
# Prediction
party.prey <- predict(party.model, CART.tst, type = "class")
rownames(Perf.Table) <- c("Tree", "Tree_pruned","rpart","party"," ")
# Prediction
party.prey <- predict(party.model, CART.tst, type = "class")
# Prediction
party.prey <- predict(party.model, CART.tst)
CART.cfm4 <- table(CART.tst$heartYN, party.model)
party.prey
CART.test$heartYN
CART.tst$heartYN
# Prediction
party.prey <- predict(party.model, CART.tst)
CART.cfm4 <- table(CART.tst$heartYN, party.prey)
CART.cfm4
Perf.Table[4,] <- perf_eval(CART.cfm4)
Perf.Table
#Assignment 6 Decision Tree
options(scipen = 10)
Perf.Table
#Assignment 6 Decision Tree
options(scipen = 5)
Perf.Table[4,] <- perf_eval(CART.cfm4)
Perf.Table
#Assignment 6 Decision Tree
options(digits = 10)
Perf.Table
#Assignment 6 Decision Tree
options(digits = 7)
Perf.Table[4,] <- perf_eval(CART.cfm4)
Perf.Table
CART.cfm4
#[Q3] 'evtree' ---------------------------------------------
install.packages("evtree")
library(evtree)
evtree.model <- evtree(heartYN ~ ., CART.trn)
plot(evtree)
plot(evtree.model)
View(CART.trn)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, niterations=100)
evtree.model <- evtree(heartYN ~ ., CART.trn, niterations=1000)
plot(evtree.model)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, niterations=100)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, niterations=50)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, ntrees = 100)
plot(evtree.model)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, ntrees = 10)
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, operatorprob = list(pmutatemajor = 0.2, pmutateminor = 0.2,
pcrossover = 0.2, psplit = 0.2, pprune = 0.2))
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, operatorprob = list(pmutatemajor = 0.2, pmutateminor = 0.2,
pcrossover = 0.3, psplit = 0.2, pprune = 0.2))
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, operatorprob = list(pmutatemajor = 0.05, pmutateminor = 0.2,
pcrossover = 0.3))
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, operatorprob = list(pmutatemajor = 0.5, pmutateminor = 0.2,
pcrossover = 0.3))
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn, operatorprob = list(pmutatemajor = 0.5, pmutateminor = 0.2,
pcrossover = 0.01))
plot(evtree.model)
evtree.model <- evtree(heartYN ~ ., CART.trn)
#[Q3-4] Plotting
plot.constparty(evtree.model)
#[Q3-4] Plotting
plot(evtree.model, type ="simple")
# Prediction
evtree.prey <- predict(evtree.model, CART.tst)
CART.cfm5 <- table(CART.tst$heartYN, evtree.prey)
CART.cfm5
rownames(Perf.Table) <- c("Tree", "Tree_pruned","rpart","party","evtree")
Perf.Table[5,] <- perf_eval(CART.cfm5)
Perf.Table
